from Crypto.Cipher import AES
import base64
from Crypto.Protocol.KDF import PBKDF2

from Crypto import Random
from Crypto.Cipher import AES
import base64
from hashlib import md5
import sys

class SubtitleDecryptor:
    """    Python reimplementation of Animelon's unencryption of it's subtitle files.
              ASS.fromString = function(raw, type) {
                return void 0 === type && (type = misc_5.Format.ASS),
                "d(^-^" === raw.slice(-5) ? ASS.fromStream(new parser.StringStream(ASS.parseString(raw)), type) : ASS.fromStream(new parser.StringStream(raw), type)
            }
            ,
            ASS.parseString = function(s) {
                return CryptoJS.AES.decrypt(s.substring(8, s.length - 5), s.substring(0, 8).split("").reverse().join("")).toString(CryptoJS.enc.Utf8).replace(/undefined/g, "")
            }
    """
    def pad(self, data):
        length = 16 - (len(data) % 16)
        return data + (chr(length)*length).encode()
    
    def unpad(self, data):
        return data[:-(data[-1] if type(data[-1]) == int else ord(data[-1]))]
    
    def bytes_to_key(self, data, salt, output=48):
        # extended from https://gist.github.com/gsakkis/4546068
        assert len(salt) == 8, len(salt)
        data += salt
        key = md5(data).digest()
        final_key = key
        while len(final_key) < output:
            key = md5(key + data).digest()
            final_key += key
        return final_key[:output]
    
    def encrypt(self, message, passphrase):
        salt = Random.new().read(8)
        key_iv = self.bytes_to_key(passphrase, salt, 32+16)
        key = key_iv[:32]
        iv = key_iv[32:]
        aes = AES.new(key, AES.MODE_CBC, iv)
        return base64.b64encode(b"Salted__" + salt + aes.encrypt(self.pad(message)))
    
    def decrypt(self, encrypted:bytes, passphrase:bytes):
        encrypted = base64.b64decode(encrypted)
        encrypted = self.pad(encrypted)
        assert encrypted[0:8] == b"Salted__"
        salt = encrypted[8:16]
        key_iv = self.bytes_to_key(passphrase, salt, 32+16)
        key = key_iv[:32]
        iv = key_iv[32:]
        aes = AES.new(key, AES.MODE_CBC, iv)
        return self.unpad(aes.decrypt(encrypted[16:]))

    def decrypt_subtitle(self, encryptedSubtitle:str):
        encryptedSubtitle = bytes(encryptedSubtitle, 'utf-8')
        key = encryptedSubtitle[0:8][::-1]
        data = encryptedSubtitle[8:-5]
        encrypted = data
        decryptor = SubtitleDecryptor()
        uncrypted = decryptor.decrypt(encrypted, key)
        return uncrypted

if __name__ == "__main__":
    s = "(^-^"
    uncrypted = SubtitleDecryptor().decrypt_subtitle(s)
    sys.stdout.buffer.write(uncrypted)